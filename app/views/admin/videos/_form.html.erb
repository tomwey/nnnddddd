<% 
# key = "uploads/video/#{SecureRandom.uuid}.mp4"
bucket = 'zgnytv'
filename = "#{SecureRandom.uuid}.mp4"
key = "uploads/video/" + filename

#构建上传策略
put_policy = Qiniu::Auth::PutPolicy.new(
    bucket,      # 存储空间
    key,     # 最终资源名，可省略，即缺省为“创建”语义，设置为nil为普通上传 
    72000000    #token过期时间，默认为3600s
)

# 加入水印功能
#转码是使用的队列名称。 
pipeline = 'video_waterprint' #设定自己账号下的pipleline

#要进行转码的转码操作。 
# icon_url = SiteConfig.find_by(key: "watermark_icon").file_url
water_icon_url = Qiniu::Utils.urlsafe_base64_encode('http://123.59.129.197/uploads/site_config/file/11/zgly_logo.png')
fops = "avthumb/mp4/wmImage/#{water_icon_url}/wmGravity/NorthWest"

#可以对转码后的文件进行使用saveas参数自定义命名，当然也可以不指定文件会默认命名并保存在当间。
saveas_key = Qiniu::Utils.urlsafe_base64_encode("zgnytv:#{key}")
fops = fops+'|saveas/'+ saveas_key

put_policy.persistent_ops = fops
put_policy.persistent_pipeline = pipeline
put_policy.scope = bucket

#生成上传 Token
uptoken = Qiniu::Auth.generate_uptoken(put_policy)

 %>
<!-- div class="dropzone" id="dropzone">
  <%= qiniu_uploader_form callback_url: videos_path,
  # scope:                "zgnytv",
  # deadline:             Time.now.to_i + 72000,
  persistentOps:        "avthumb/mp4/wmImage/" + Qiniu::Utils.urlsafe_base64_encode(SiteConfig.find_by(key: "watermark_icon").file_url) + "/wmGravity/NorthWest|saveas/" + Qiniu::Utils.urlsafe_base64_encode("zgnytv:#{key}"),
  persistentPipeline:   "video_waterprint",
  #   persistentNotifyUrl:  'http://123.59.129.197/videos',
    expires_in:    72000,
    bucket:        'zgnytv',
    id:            "photograph-uploader",
    key:           key,
    custom_fields: {aaa:1,bbb:2},
    progress_bar_id: 'progress-bar',
    drop_paste_zone_id: 'dropzone' do %>
    
    <div class="bars" id="progress-bar" style="margin-bottom: 20px;">
      <%= label_tag '*视频文件' %><br>
      <%= file_field_tag :file, accept: "video/mp4, video/mov, video/mpg, video/mpeg" %>
    </div>
  <% end %>
</div -->

  <div id="upload-container" style="margin-bottom: 20px; width: 50%; padding: 20px 0 30px 20px; border: 1px dashed black;">
    <label for="video-file">*视频文件</label>
    <!-- <input type="file" name="video-file" id="video-file"> -->
    <button id="video-file">选择视频文件</button> <span id="file-name">支持MP4, MOV, MPEG格式</span>
    <div id="upload-progress">
      
      <div id="progress" style="display: none; width: 200px; height: 10px; border: 1px solid black; border-radius: 2px; margin-top: 10px; margin-bottom: 10px;">
        <div class="bar" style="width: 0%; height: 10px; background-color: green; "></div>
      </div>
      
      <p class="progress-info"></p>
    </div>
  </div>
  
<%= form_for [:admin, @video] do |f| %>
  
  <%= render 'shared/error_messages', target: @video %>
  
  <div style="width: 80%; margin-bottom: 20px;">
    <%= f.label :category_id, '所属类别' %><br>
    <%= f.select :category_id, Category.no_delete.opened.map { |category| [category.name, category.id] }, { prompt: '-- 请选择类别 --' }  %>
  </div>

  <div style="width: 80%; margin-bottom: 20px;">
    <%= f.label :title, '*视频标题' %><br>
    <%= f.text_field :title %>
  </div>
  <div style="width: 80%; margin-bottom: 20px;">
    <%= f.label :cover_image, '*视频封面图' %><br>
    <%= f.file_field :cover_image %>
  </div>
  
  <% if not f.object.new_record? %>
  <div style="width: 80%; margin-bottom: 20px;">
    <%= f.label :likes_count, '点赞数' %><br>
    <%= f.text_field :likes_count %>
  </div>
  <div style="width: 80%; margin-bottom: 20px;">
    <%= f.label :view_count, '观看数' %><br>
    <%= f.text_field :view_count %>
  </div>
  <% end %>
  
  <!--div style="width: 80%; margin-bottom: 20px;">
    <%= f.label :file, '*视频文件' %><br>
    <%= f.file_field :file %>
  </div-->
    <%= f.hidden_field :file, value: f.object.file %>
  
  <div style="width: 80%; margin-bottom: 20px;">
    <%= f.label :body, '视频简介' %>
    <%= text_area_tag :body,  @video.body, name: 'video[body]', :class => "redactor", :rows => 40, :cols => 120 %>
  </div>
  
  <div style="width: 80%; margin-bottom: 20px;">
    <%= f.label :sort %><br>
    <%= f.text_field :sort %>
  </div>
  
  <%= f.submit '提交' %>
<% end %>

<script src="http://cdn.staticfile.org/Plupload/2.1.1/plupload.full.min.js"></script>
<script src="http://cdn.staticfile.org/qiniu-js-sdk/1.0.14-beta/qiniu.min.js"></script>

<script>
var uploader = Qiniu.uploader({
    runtimes: 'html5,flash,html4',      // 上传模式,依次退化
    browse_button: 'video-file',         // 上传选择的点选按钮，**必需**
    // 在初始化时，uptoken, uptoken_url, uptoken_func 三个参数中必须有一个被设置
    // 切如果提供了多个，其优先级为 uptoken > uptoken_url > uptoken_func
    // 其中 uptoken 是直接提供上传凭证，uptoken_url 是提供了获取上传凭证的地址，如果需要定制获取 uptoken 的过程则可以设置 uptoken_func
    uptoken : '<%= uptoken %>', // uptoken 是上传凭证，由其他程序生成
    // uptoken_url: '/uptoken',         // Ajax 请求 uptoken 的 Url，**强烈建议设置**（服务端提供）
    // uptoken_func: function(file){    // 在需要获取 uptoken 时，该方法会被调用
    //    // do something
    //    return uptoken;
    // },
    get_new_uptoken: false,             // 设置上传文件的时候是否每次都重新获取新的 uptoken
    // downtoken_url: '/downtoken',
    // Ajax请求downToken的Url，私有空间时使用,JS-SDK 将向该地址POST文件的key和domain,服务端返回的JSON必须包含`url`字段，`url`值为该文件的下载地址
    // unique_names: true,              // 默认 false，key 为文件名。若开启该选项，JS-SDK 会为每个文件自动生成key（文件名）
    // save_key: true,                  // 默认 false。若在服务端生成 uptoken 的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理
    domain: 'http://cdn.yaying.tv',     // bucket 域名，下载资源时用到，**必需**
    container: 'upload-container',             // 上传区域 DOM ID，默认是 browser_button 的父元素，
    max_file_size: '100000mb',             // 最大文件体积限制
    flash_swf_url: 'http://cdn.staticfile.org/Plupload/2.1.1/Moxie.swf',  //引入 flash,相对路径
    max_retries: 3,                     // 上传失败最大重试次数
    dragdrop: true,                     // 开启可拖曳上传
    drop_element: 'upload-container',          // 拖曳上传区域元素的 ID，拖曳文件或文件夹后可触发上传
    chunk_size: '4mb',                  // 分块上传时，每块的体积
    // auto_start: true,                   // 选择文件后自动上传，若关闭需要自己绑定事件触发上传,
    //x_vars : {
    //    自定义变量，参考http://developer.qiniu.com/docs/v6/api/overview/up/response/vars.html
    //    'time' : function(up,file) {
    //        var time = (new Date()).getTime();
              // do something with 'time'
    //        return time;
    //    },
    //    'size' : function(up,file) {
    //        var size = file.size;
              // do something with 'size'
    //        return size;
    //    }
    //},
    init: {
        'FilesAdded': function(up, files) {
          var file = files[0];
          $("#file-name").text(file.name);
          
          if (file.type != "video/mp4" && file.type != "video/mov" && file.type != "video/mpeg") {
            
            plupload.each(files, function(ff) {
              up.removeFile(ff.id);
            });
            
            uploader.stop();
            
            alert('请选择视频文件！')
            // return false;
            
          } else {
            // return true;

            uploader.start();
          }
            // plupload.each(files, function(file) {
            //     // 文件添加进队列后,处理相关的事情
            //   $("#file-name").text(file.name);
            //   if (file.type != "video/mp4" && file.type != "video/mov" && file.type != "video/mpeg") {
            //     alert('请选择视频文件！')
            //     // return false;
            //     uploader.stop();
            //   } else {
            //     // return true;
            //   }
            // });
        },
        'BeforeUpload': function(up, file) {
               // 每个文件上传前,处理相关的事情
        },
        'UploadProgress': function(up, file) {
               // 每个文件上传时,处理相关的事情
          // console.log(up.total.percent)
          // $("#upload-state").text('上传进度：' + up.total.percent + '%');
          $("#progress").show();
          $("#progress .bar").css('width', up.total.percent + '%');
          $(".progress-info").text('上传进度：' + up.total.percent + '%');
        },
        'FileUploaded': function(up, file, info) {
               // 每个文件上传成功后,处理相关的事情
               // 其中 info 是文件上传成功后，服务端返回的json，形式如
               // {
               //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
               //    "key": "gogopher.jpg"
               //  }
               // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html

               // var domain = up.getOption('domain');
               // var res = parseJSON(info);
               // var sourceLink = domain + res.key; 获取上传成功后的文件的Url
               // console.log(info)
               $("#video_file").val('<%= filename %>');
               // $("#upload-state").text('上传完成');
               // $("#progress .bar").remove();
               $(".progress-info").text('上传完成');
        },
        'Error': function(up, err, errTip) {
               //上传出错时,处理相关的事情
        },
        'UploadComplete': function() {
               //队列文件处理完毕后,处理相关的事情
        },
        'Key': function(up, file) {
            // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
            // 该配置必须要在 unique_names: false , save_key: false 时才生效

            var key = "";
            // do something with key here
            return key
        }
    }
});
</script>

<!-- script id="template-upload" type="text/x-tmpl">
  <div class="upload">
  {%=o.name%}
  <div class="progress"><div class="bar" style="width: 0%"></div></div>
</div>
</script -->

<!--script>
$(document).ready(
function() {
  var createStorageKey, host, uploadAttachment;

  document.addEventListener("trix-attachment-add", function(event) {
    var attachment;
    attachment = event.attachment;
    if (attachment.file) {
      return uploadAttachment(attachment);
    }
  });

  host = "<%= request.protocol %><%= request.host %><%= request.port == 80 ? '' : ':' + request.port.to_s %>";//"https://d13txem1unpe48.cloudfront.net/";

  uploadAttachment = function(attachment) {
    var file, form, key, xhr;
    file = attachment.file;
    key = createStorageKey(file);
    form = new FormData;
    form.append("key", key);
    form.append("Content-Type", file.type);
    form.append("file", file);
    xhr = new XMLHttpRequest;
    xhr.open("POST", host + '/api/v1/attachments', true);
    xhr.upload.onprogress = function(event) {
      var progress;
      progress = event.loaded / event.total * 100;
      return attachment.setUploadProgress(progress);
    };
    xhr.onload = function() {
      var href, url;
      if (xhr.status === 201) {
        var result = JSON.parse(xhr.responseText);
        url = href = result.file_url;
        return attachment.setAttributes({
          url: url,
          href: href
        });
      }
    };
    return xhr.send(form);
  };

  createStorageKey = function(file) {
    var date, day, time;
    date = new Date();
    day = date.toISOString().slice(0, 10);
    time = date.getTime();
    return "tmp/" + day + "/" + time + "-" + file.name;
  };

});
</script-->